# This workflow:
# - Packages up the encoders, and publishes to Maven
# - Packages up the Python library, and publishes to PyPI
# - Builds the server Docker image, and pushes to Docker Hub
# - Creates a draft release
#
# This is only run when a version tag is pushed.

name: Release

on:
  push:
    tags:
      - "v**"

jobs:
  deploy-maven:
    name: Maven Central
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Install GPG key
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: Configure Maven settings
        uses: s4u/maven-settings-action@v2.6.0
        with:
          servers: |
            [{
              "id": "ossrh",
              "username": "${{ secrets.OSSRH_USERNAME }}",
              "password": "${{ secrets.OSSRH_PASSWORD }}"
            }]
      - name: Run the deploy goal with Maven
        run: |
          mvn --batch-mode deploy \
          -pl fhir-server,library-api,library-runtime -am \
          -PmavenRelease,docs \
          -DskipTests \
          -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"
        timeout-minutes: 30

  deploy-python:
    name: PyPI
    runs-on: ubuntu-latest
    needs: deploy-maven
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run the deploy goal with Maven
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          mvn --batch-mode deploy \
          -pl lib/python -am \
          -PpythonRelease \
          -DskipTests
        timeout-minutes: 30

  deploy-docker:
    name: Docker Hub
    runs-on: ubuntu-latest
    needs: deploy-python
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Run the deploy goal with Maven
        run: |
          mvn --batch-mode deploy \
          -pl fhir-server -am \
          -Pdocker \
          -DskipTests -DskipScalaDocs
        timeout-minutes: 30
  
  build-r:
    name: Build R package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |-
            ${{ runner.os }}-maven-
      - name: Get R package installation location
        run: echo "R_PACKAGES=$(Rscript -e 'cat(.libPaths(), sep="\n")' | head -n 1)" >> $GITHUB_ENV
      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_PACKAGES }}
          key: r-packages-${{ runner.os }}-${{ hashFiles('lib/R/DESCRIPTION.src') }}
          restore-keys: r-packages-${{ runner.os }}-
      - name: Extract Spark version
        working-directory: lib/R
        run: echo "SPARK_VERSION=$(mvn help:evaluate -Dexpression=pathling.Rapi.sparkVersion -q -DforceStdout)" >> $GITHUB_ENV
      - name: Extract Hadoop version
        working-directory: lib/R
        run: echo "HADOOP_VERSION=$(mvn help:evaluate -Dexpression=pathling.Rapi.hadoopVersion -q -DforceStdout)" >> $GITHUB_ENV
      - name: Cache Spark
        id: cache-spark
        uses: actions/cache@v2
        with:
          path: /home/runner/spark/spark-${{ env.SPARK_VERSION }}-bin-hadoop${{ env.HADOOP_VERSION }}
          key: spark-${{ env.SPARK_VERSION }}-bin-hadoop${{ env.HADOOP_VERSION }}
      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v2
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "4.1.3"
          use-public-rspm: true
      - name: Install texlive-latex-base
        run: sudo apt-get install -y texlive-latex-base texlive-fonts-extra
      - name: Run the install goal with Maven
        env:
          R_KEEP_PKG_SOURCE: yes
        run: >-
          mvn --batch-mode install
          -pl lib/R -am -Pdocs -DskipTests
        timeout-minutes: 60
      - name: Upload package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: r-package
          path: lib/R/target/pathling_*.tar.gz

  create-release:
    name: Draft GitHub release
    runs-on: ubuntu-latest
    needs: [ deploy-maven, deploy-python, deploy-docker, build-r ]
    steps:
      - name: Download R package artifact
        uses: actions/download-artifact@v2
        with:
          name: r-package
      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.TAG_NAME }}
          draft: true
          prerelease: false
          files: |
            pathling_*.tar.gz
