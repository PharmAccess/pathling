# This workflow will build the software and documentation to ensure there are no errors, and also
# execute the tests.
#
# It will also package the server as a Docker images, and push it to the configured repository.
#
# This is only run on master, and is only intended for changes that have been reviewed and approved 
# for deployment.

name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  encoders:
    name: Build and test encoders
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run the verify goal with Maven
        run: |
          mvn --batch-mode verify \
          -pl encoders -am \
          -Dpathling.systemTest.auth.clientSecret=${{ secrets.TEST_CLIENT_SECRET }} \
          -Dmaven.test.failure.ignore=true
        timeout-minutes: 30
      - name: Upload encoders test reports
        uses: actions/upload-artifact@v2
        with:
          name: encoders-surefire-reports
          path: encoders/target/surefire-reports
      - name: Publish test results
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: Encoders test report
          fail_on_test_failures: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: encoders/target/site/jacoco/jacoco.xml,fhir-server/target/site/jacoco/jacoco.xml
  fhir-server:
    name: Build and test FHIR server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run the verify goal with Maven
        run: |
          mvn --batch-mode verify \
          -pl fhir-server -am \
          -Pdocker,skip-encoders-tests \
          -Dpathling.systemTest.auth.clientSecret=${{ secrets.TEST_CLIENT_SECRET }} \
          -Dmaven.test.failure.ignore=true
        timeout-minutes: 45
      - name: Upload fhir-server test reports
        uses: actions/upload-artifact@v2
        with:
          name: fhir-server-surefire-reports
          path: fhir-server/target/surefire-reports
      - name: Upload timing log
        uses: actions/upload-artifact@v2
        with:
          name: fhir-server-timing-log
          path: fhir-server/target/timing.log
      - name: Publish test results
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: FHIR server test report
          fail_on_test_failures: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: encoders/target/site/jacoco/jacoco.xml,fhir-server/target/site/jacoco/jacoco.xml
  python-api:
    name: Build and test Python API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache Python packages
        uses: actions/cache@v2
        id: pythoncache
        with:
          path: /home/runner/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('lib/python/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip
      - name: Run the verify goal with Maven
        run: |
          mvn --batch-mode verify \
          -pl lib/python -am \
          -Pskip-encoders-tests
        timeout-minutes: 15
  site:
    name: Build site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.3
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run the verify goal with Maven
        run: |
          mvn --batch-mode verify \
          -pl site -am \
          -DskipTests
        timeout-minutes: 30
  deploy:
    name: Deploy Docker image
    runs-on: ubuntu-latest
    needs:
      - encoders
      - fhir-server
      - site
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Run the deploy goal with Maven
        run: |
          mvn --batch-mode deploy \
          -pl fhir-server,lib/import,lib/js -am \
          -Pdocker \
          -DskipTests \
          -Dmaven.deploy.skip
        timeout-minutes: 30
      - name: Upload import lambda
        uses: actions/upload-artifact@v2
        with:
          name: import-lambda
          path: lib/import/target/pathling-import-lambda.zip
