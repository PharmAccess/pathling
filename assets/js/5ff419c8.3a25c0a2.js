"use strict";(self.webpackChunkpathling_site=self.webpackChunkpathling_site||[]).push([[194],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>d});var a=n(7294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var s=a.createContext({}),c=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,s=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=c(n),d=l,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(g,o(o({ref:e},p),{},{components:n})):a.createElement(g,o({ref:e},p))}));function d(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:l,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(7294),l=n(6010);const r="tabItem_Ymn6";function o(t){let{children:e,hidden:n,className:o}=t;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:n},e)}},5488:(t,e,n)=>{n.d(e,{Z:()=>d});var a=n(7462),l=n(7294),r=n(6010),o=n(2389),i=n(7392),s=n(7094),c=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function m(t){var e;const{lazy:n,block:o,defaultValue:m,values:d,groupId:g,className:h}=t,k=l.Children.map(t.children,(t=>{if((0,l.isValidElement)(t)&&"value"in t.props)return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=d??k.map((t=>{let{props:{value:e,label:n,attributes:a}}=t;return{value:e,label:n,attributes:a}})),b=(0,i.l)(v,((t,e)=>t.value===e.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(e=k.find((t=>t.props.default)))?void 0:e.props.value)??k[0].props.value;if(null!==f&&!v.some((t=>t.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${v.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,s.U)(),[C,E]=(0,l.useState)(f),T=[],{blockElementScrollPositionUntilNextRender:I}=(0,c.o5)();if(null!=g){const t=y[g];null!=t&&t!==C&&v.some((e=>e.value===t))&&E(t)}const O=t=>{const e=t.currentTarget,n=T.indexOf(e),a=v[n].value;a!==C&&(I(e),E(a),null!=g&&N(g,String(a)))},D=t=>{var e;let n=null;switch(t.key){case"ArrowRight":{const e=T.indexOf(t.currentTarget)+1;n=T[e]??T[0];break}case"ArrowLeft":{const e=T.indexOf(t.currentTarget)-1;n=T[e]??T[T.length-1];break}}null==(e=n)||e.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":o},h)},v.map((t=>{let{value:e,label:n,attributes:o}=t;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===e?0:-1,"aria-selected":C===e,key:e,ref:t=>T.push(t),onKeyDown:D,onFocus:O,onClick:O},o,{className:(0,r.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":C===e})}),n??e)}))),n?(0,l.cloneElement)(k.filter((t=>t.props.value===C))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},k.map(((t,e)=>(0,l.cloneElement)(t,{key:e,hidden:t.props.value!==C})))))}function d(t){const e=(0,o.Z)();return l.createElement(m,(0,a.Z)({key:String(e)},t))}},1316:(t,e,n)=>{n.d(e,{_6:()=>o,fB:()=>l,t8:()=>r});var a=n(7294);const l=()=>a.createElement("p",null,"To use the Pathling encoders from Python, install the ",a.createElement("a",{href:"https://pypi.org/project/pathling/"},"pathling")," package using ",a.createElement("a",{href:"https://pip.pypa.io/"},"pip"),". Note that Java 11 or later is required, with your",a.createElement("code",null,"JAVA_HOME")," properly set."),r=()=>a.createElement("p",null,"To use the Pathling encoders from Scala, install the ",a.createElement("code",null,"au.csiro.pathling:encoders")," ",a.createElement("a",{href:"https://maven.apache.org/"},"Maven")," package."),o=()=>a.createElement("p",null,"To use the Pathling encoders from Java, install the ",a.createElement("code",null,"au.csiro.pathling:encoders")," ",a.createElement("a",{href:"https://maven.apache.org/"},"Maven")," package.")},5652:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var a=n(7462),l=(n(7294),n(3905)),r=n(5488),o=n(5162),i=n(1316);const s={sidebar_position:3},c="Terminology functions",p={unversionedId:"libraries/terminology",id:"libraries/terminology",title:"Terminology functions",description:"The library also provides a set of functions for querying a FHIR terminology",source:"@site/docs/libraries/terminology.md",sourceDirName:"libraries",slug:"/libraries/terminology",permalink:"/docs/libraries/terminology",draft:!1,editUrl:"https://github.com/aehrc/pathling/tree/main/site/docs/libraries/terminology.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"libraries",previous:{title:"FHIR encoders",permalink:"/docs/libraries/encoders"},next:{title:"pathling-client",permalink:"/docs/libraries/javascript/pathling-client"}},u={},m=[{value:"Value set membership",id:"value-set-membership",level:3},{value:"Concept translation",id:"concept-translation",level:3},{value:"Subsumption testing",id:"subsumption-testing",level:3},{value:"Authentication",id:"authentication",level:3}],d={toc:m};function g(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"terminology-functions"},"Terminology functions"),(0,l.kt)("p",null,"The library also provides a set of functions for querying a FHIR terminology\nserver from within your queries and transformations."),(0,l.kt)("h3",{id:"value-set-membership"},"Value set membership"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"member_of")," function can be used to test the membership of a code within a\n",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/valueset.html"},"FHIR value set"),". This can be used with both\nexplicit value sets (i.e. those that have been pre-defined and loaded into the\nterminology server) and implicit value sets (e.g. SNOMED CT\n",(0,l.kt)("a",{parentName:"p",href:"http://snomed.org/ecl"},"Expression Constraint Language"),")."),(0,l.kt)("p",null,'In this example, we take a list of SNOMED CT diagnosis codes and\ncreate a new column which shows which are viral infections. We use an ECL\nexpression to define viral infection as a disease with a pathological process\nof "Infectious process", and a causative agent of "Virus".'),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)(i.fB,{mdxType:"PythonInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\nfrom pathling.functions import to_coding, to_ecl_value_set\n\npc = PathlingContext.create()\ncsv = pc.spark.read.csv(\"conditions.csv\")\n\nresult = pc.member_of(csv, to_coding(csv.CODE, 'http://snomed.info/sct'),\n                      to_ecl_value_set(\"\"\"\n<< 64572001|Disease| : (\n  << 370135005|Pathological process| = << 441862004|Infectious process|,\n  << 246075003|Causative agent| = << 49872002|Virus|\n)\n                      \"\"\"), 'VIRAL_INFECTION')\nresult.select('CODE', 'DESCRIPTION', 'VIRAL_INFECTION').show()\n"))),(0,l.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)(i.t8,{mdxType:"ScalaInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.library.TerminologyHelpers._\n\nval pc = PathlingContext.create()\nval csv = spark.read.csv("conditions.csv")\n\nval result = pc.memberOf(csv, toCoding(csv.col("CODE"), "http://snomed.info/sct"),\n    toEclValueSet("""\n        << 64572001|Disease| : (\n          << 370135005|Pathological process| = << 441862004|Infectious process|,\n          << 246075003|Causative agent| = << 49872002|Virus|\n        )\n    """), "VIRAL_INFECTION")\nresult.select("CODE", "DESCRIPTION", "VIRAL_INFECTION").show()\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)(i._6,{mdxType:"JavaInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.library.TerminologyHelpers.*;\nimport au.csiro.pathling.library.PathlingContext;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n    public static void main(String[] args) {\n        PathlingContext pc = PathlingContext.create();\n        Dataset<Row> csv = pc.getSpark().read().csv("conditions.csv");\n\n        Dataset<Row> result = pc.memberOf(csv, toCoding(csv.col("code"), SNOMED_URI),\n            toEclValueSet("<< 64572001|Disease| : ("\n                + "<< 370135005|Pathological process| = << 441862004|Infectious process|,"\n                + "<< 246075003|Causative agent| = << 49872002|Virus|"\n                + ")"), "VIRAL_INFECTION");\n        result.select("CODE", "DESCRIPTION", "VIRAL_INFECTION").show();\n    }\n}\n\n')))),(0,l.kt)("p",null,"Results in:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"CODE"),(0,l.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,l.kt)("th",{parentName:"tr",align:null},"VIRAL_INFECTION"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"65363002"),(0,l.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"16114001"),(0,l.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"444814009"),(0,l.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"444814009"),(0,l.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"43878008"),(0,l.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat"),(0,l.kt)("td",{parentName:"tr",align:null},"false")))),(0,l.kt)("h3",{id:"concept-translation"},"Concept translation"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"translate")," function can be used to translate codes from one code system to\nanother using maps that are known to the terminology server. In this example, we\ntranslate our SNOMED CT diagnosis codes into Read CTV3."),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)(i.fB,{mdxType:"PythonInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\nfrom pathling.functions import to_coding\n\npc = PathlingContext.create()\ncsv = pc.spark.read.csv(\"conditions.csv\")\n\nresult = pc.translate(csv, to_coding(csv.CODE, 'http://snomed.info/sct'),\n                      'http://snomed.info/sct/900000000000207008?fhir_cm='\n                      '900000000000497000',\n                      output_column_name='READ_CODE')\nresult = result.withColumn('READ_CODE', result.READ_CODE.code)\nresult.select('CODE', 'DESCRIPTION', 'READ_CODE').show()\n"))),(0,l.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)(i.t8,{mdxType:"ScalaInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.library.TerminologyHelpers._\n\nval pc = PathlingContext.create()\nval csv = spark.read.csv("conditions.csv")\n\nval result = pc.translate(csv, toCoding(csv.col("CODE"), SNOMED_URI),\n    "http://snomed.info/sct/900000000000207008?fhir_cm=900000000000497000", \n    false, "equivalent", "READ_CODE")\nresult.select("CODE", "DESCRIPTION", "READ_CODE").show()\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)(i._6,{mdxType:"JavaInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.library.TerminologyHelpers.*;\nimport au.csiro.pathling.library.PathlingContext;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n    public static void main(String[] args) {\n        PathlingContext pc = PathlingContext.create();\n        Dataset<Row> csv = pc.getSpark().read().csv("conditions.csv");\n\n        Dataset<Row> result = pc.translate(csv, toCoding(csv.col("CODE"), SNOMED_URI),\n            "http://snomed.info/sct/900000000000207008?fhir_cm=900000000000497000", \n            false, "equivalent", "READ_CODE");\n        result.select("CODE", "DESCRIPTION", "READ_CODE").show();\n    }\n}\n\n')))),(0,l.kt)("p",null,"Results in:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"CODE"),(0,l.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,l.kt)("th",{parentName:"tr",align:null},"READ_CODE"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"65363002"),(0,l.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,l.kt)("td",{parentName:"tr",align:null},"X00ik")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"16114001"),(0,l.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,l.kt)("td",{parentName:"tr",align:null},"S34..")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"444814009"),(0,l.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,l.kt)("td",{parentName:"tr",align:null},"XUjp0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"444814009"),(0,l.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,l.kt)("td",{parentName:"tr",align:null},"XUjp0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"43878008"),(0,l.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat"),(0,l.kt)("td",{parentName:"tr",align:null},"A340.")))),(0,l.kt)("h3",{id:"subsumption-testing"},"Subsumption testing"),(0,l.kt)("p",null,'Subsumption test is a fancy way of saying "is this code equal or a subtype of\nthis other code".'),(0,l.kt)("p",null,'For example, a code representing "ankle fracture" is subsumed\nby another code representing "fracture". The "fracture" code is more general,\nand using it with subsumption can help us find other codes representing\ndifferent subtypes of fracture.'),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"subsumes"),' function allows us to perform subsumption testing on codes within\nour data. The order of the left and right operands can be reversed to query\nwhether a code is "subsumed by" another code.'),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)(i.fB,{mdxType:"PythonInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\nfrom pathling.coding import Coding\nfrom pathling.functions import to_coding\n\npc = PathlingContext.create()\ncsv = pc.spark.read.csv(\"conditions.csv\")\n\n# 232208008 |Ear, nose and throat disorder|\nleft_coding = Coding('http://snomed.info/sct', '232208008')\nright_coding_column = to_coding(csv.CODE, 'http://snomed.info/sct')\n\nresult = pc.subsumes(csv, 'SUBSUMES',\n                     left_coding=left_coding,\n                     right_coding_column=right_coding_column)\n\nresult.select('CODE', 'DESCRIPTION', 'IS_ENT').show()\n"))),(0,l.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)(i.t8,{mdxType:"ScalaInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.library.TerminologyHelpers._\nimport au.csiro.pathling.fhirpath.encoding.CodingEncoding\n\nval pc = PathlingContext.create()\nval csv = spark.read.csv("conditions.csv")\n\nval result = pc.subsumes(csv,\n    // 232208008 |Ear, nose and throat disorder|\n    CodingEncoding.toStruct(\n        lit(null),\n        lit(SNOMED_URI),\n        lit(null),\n        lit("232208008"),\n        lit(null),\n        lit(null)\n    ), toCoding(csv.col("CODE"), SNOMED_URI), "IS_ENT")\nresult.select("CODE", "DESCRIPTION", "IS_ENT").show()\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)(i._6,{mdxType:"JavaInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.library.TerminologyHelpers.*;\nimport au.csiro.pathling.library.PathlingContext;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n    public static void main(String[] args) {\n        PathlingContext pc = PathlingContext.create();\n        Dataset<Row> csv = pc.getSpark().read().csv("conditions.csv");\n\n        Dataset<Row> result = pc.subsumes(csv,\n            // 232208008 |Ear, nose and throat disorder|\n            CodingEncoding.toStruct(\n                lit(null),\n                lit(SNOMED_URI),\n                lit(null),\n                lit("232208008"),\n                lit(null),\n                lit(null)\n            ), toCoding(csv.col("CODE"), SNOMED_URI), "IS_ENT");\n        result.select("CODE", "DESCRIPTION", "IS_ENT").show();\n    }\n}\n\n')))),(0,l.kt)("p",null,"Results in:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"CODE"),(0,l.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,l.kt)("th",{parentName:"tr",align:null},"IS_ENT"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"65363002"),(0,l.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"16114001"),(0,l.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"444814009"),(0,l.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,l.kt)("td",{parentName:"tr",align:null},"true")))),(0,l.kt)("h3",{id:"authentication"},"Authentication"),(0,l.kt)("p",null,"Pathling can be configured to connect to a protected terminology server by\nsupplying a set of OAuth2 client credentials and a token endpoint."),(0,l.kt)("p",null,"Here is an example of how to authenticate to\nthe ",(0,l.kt)("a",{parentName:"p",href:"https://ontology.nhs.uk/"},"NHS terminology server"),":"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)(i.fB,{mdxType:"PythonInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\n\npc = PathlingContext.create(\n    terminology_server_url='https://ontology.nhs.uk/production1/fhir',\n    token_endpoint='https://ontology.nhs.uk/authorisation/auth/realms/nhs-digital-terminology/protocol/openid-connect/token',\n    client_id='[client ID]',\n    client_secret='[client secret]'\n)\n"))),(0,l.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)(i.t8,{mdxType:"ScalaInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.{PathlingContext, PathlingContextConfiguration}\n\nval config = PathlingContextConfiguration.builder()\n        .terminologyServerUrl("https://ontology.nhs.uk/production1/fhir")\n        .tokenEndpoint("https://ontology.nhs.uk/authorisation/auth/realms/nhs-digital-terminology/protocol/openid-connect/token")\n        .clientId("[client ID]")\n        .clientSecret("[client secret]")\n        .build()\nval pc = PathlingContext.create(config)\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)(i._6,{mdxType:"JavaInstallation"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'import au.csiro.pathling.library.PathlingContext;\nimport au.csiro.pathling.library.PathlingContextConfiguration;\n\nclass MyApp {\n    public static void main(String[] args) {\n        PathlingContextConfiguration config = PathlingContextConfiguration.builder()\n                .terminologyServerUrl("https://ontology.nhs.uk/production1/fhir")\n                .tokenEndpoint("https://ontology.nhs.uk/authorisation/auth/realms/nhs-digital-terminology/protocol/openid-connect/token")\n                .clientId("[client ID]")\n                .clientSecret("[client secret]")\n                .build();\n        PathlingContext pc = PathlingContext.create(config);\n        // ...\n    }\n}\n\n')))))}g.isMDXComponent=!0}}]);