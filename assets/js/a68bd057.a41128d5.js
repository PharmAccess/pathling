"use strict";(self.webpackChunkpathling_site=self.webpackChunkpathling_site||[]).push([[434],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(i,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9743:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>w,contentTitle:()=>N,default:()=>P,frontMatter:()=>y,metadata:()=>S,toc:()=>x});var a=n(7462),r=n(7294),o=n(3905),s=n(6010),l=n(2389),i=n(7392),p=n(7094),c=n(2466);const u="tabList__CuJ",d="tabItem_LNqP";function h(e){var t,n;const{lazy:o,block:l,defaultValue:h,values:m,groupId:f,className:k}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=m?m:g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,i.l)(b,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===h?h:null!=(t=null!=h?h:null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)?t:g[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:S}=(0,p.U)(),[w,x]=(0,r.useState)(y),D=[],{blockElementScrollPositionUntilNextRender:P}=(0,c.o5)();if(null!=f){const e=N[f];null!=e&&e!==w&&b.some((t=>t.value===e))&&x(e)}const T=e=>{const t=e.currentTarget,n=D.indexOf(t),a=b[n].value;a!==w&&(P(t),x(a),null!=f&&S(f,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=D.indexOf(e.currentTarget)+1;n=null!=(a=D[t])?a:D[0];break}case"ArrowLeft":{var r;const t=D.indexOf(e.currentTarget)-1;n=null!=(r=D[t])?r:D[D.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":l},k)},b.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>D.push(e),onKeyDown:O,onFocus:T,onClick:T},o,{className:(0,s.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,l.Z)();return r.createElement(h,(0,a.Z)({key:String(t)},e))}const f="tabItem_Ymn6";function k(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,s.Z)(f,a),hidden:n},t)}const g=()=>r.createElement("p",null,"To use the Pathling encoders from Python, install the ",r.createElement("a",{href:"https://pypi.org/project/pathling/"},"pathling")," package using ",r.createElement("a",{href:"https://pip.pypa.io/"},"pip"),". Note that Java 11 or later is required, with your",r.createElement("code",null,"JAVA_HOME")," properly set."),b=()=>r.createElement("p",null,"To use the Pathling encoders from Scala, install the ",r.createElement("code",null,"au.csiro.pathling:encoders")," ",r.createElement("a",{href:"https://maven.apache.org/"},"Maven")," package."),v=()=>r.createElement("p",null,"To use the Pathling encoders from Java, install the ",r.createElement("code",null,"au.csiro.pathling:encoders")," ",r.createElement("a",{href:"https://maven.apache.org/"},"Maven")," package."),y={sidebar_position:1,sidebar_label:"Encoders"},N="Encoders",S={unversionedId:"encoders/index",id:"encoders/index",title:"Encoders",description:"Pathling provides a set of libraries that can be used to transform data between",source:"@site/docs/encoders/index.md",sourceDirName:"encoders",slug:"/encoders/",permalink:"/docs/encoders/",draft:!1,editUrl:"https://github.com/aehrc/pathling/tree/main/site/docs/encoders/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Encoders"}},w={},x=[{value:"Reading in NDJSON",id:"reading-in-ndjson",level:2},{value:"Reading in Bundles",id:"reading-in-bundles",level:2},{value:"Installation in Databricks",id:"installation-in-databricks",level:2},{value:"Spark cluster configuration",id:"spark-cluster-configuration",level:2}],D={toc:x};function P(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},D,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"encoders"},"Encoders"),(0,o.kt)("p",null,"Pathling provides a set of libraries that can be used to transform data between\nFHIR (",(0,o.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/R4/json.html"},"JSON"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/R4/xml.html"},"XML"),") and Apache Spark data sets. The\nencoders can be used from Python, Scala and Java."),(0,o.kt)("p",null,"We also have upcoming support for R, subscribe to\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aehrc/pathling/issues/193"},"this issue")," for updates."),(0,o.kt)("p",null,"Once your data is encoded as a Spark data set, it can be queried using SQL, or\ntransformed using the full library of functions that Spark provides. It can also\nbe written to ",(0,o.kt)("a",{parentName:"p",href:"https://parquet.apache.org/"},"Parquet")," and other formats that are\ncompatible with a wide range of tools. See\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/"},"Spark documentation")," for more\ndetails."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"We also have upcoming support for R, subscribe to\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aehrc/pathling/issues/193"},"this issue")," for updates.")),(0,o.kt)("h2",{id:"reading-in-ndjson"},"Reading in NDJSON"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://ndjson.org"},"NDJSON")," is a format commonly used for bulk FHIR data, and\nconsists of files (one per resource type) that contains one JSON resource per\nline."),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(k,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(g,{mdxType:"PythonInstallation"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\n\npc = PathlingContext.create()\n\n# Read each line from the NDJSON into a row within a Spark data set.\nndjson_dir = '/some/path/ndjson/'\njson_resources = pc.spark.read.text(ndjson_dir)\n\n# Convert the data set of strings into a structured FHIR data set.\npatients = pc.encode(json_resources, 'Patient')\n\n# Do some stuff.\npatients.select('id', 'gender', 'birthDate').show()\n"))),(0,o.kt)(k,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,o.kt)(b,{mdxType:"ScalaInstallation"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.sql.SparkSession\nimport au.csiro.pathling.library.PathlingContext\n\nval spark = SparkSession.builder.getOrCreate()\n\n// Read each line from the NDJSON into a row within a Spark data set.\nval ndjsonDir = "/some/path/ndjson/"\nval jsonResources = spark.read.text(ndjsonDir)\n\n// Convert the data set of strings into a structured FHIR data set.\nval pc = PathlingContext.create(spark)\nval patients = pc.encode(jsonResources, "Patient")\n\n// Do some stuff.\npatients.select("id", "gender", "birthDate").show()\n'))),(0,o.kt)(k,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(v,{mdxType:"JavaInstallation"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.spark.sql.SparkSession;\nimport org.apache.spark.sql.Dataset;\nimport au.csiro.pathling.library.PathlingContext;\n\nclass MyApp {\n\n  public static void main(String args[]) {\n    SparkSession spark = SparkSession.builder().getOrCreate();\n\n    // Read each line from the NDJSON into a row within a Spark data set.\n    String ndjsonDir = "/some/path/ndjson/";\n    Dataset<Row> jsonResources = spark.read().text(ndjsonDir);\n\n    // Convert the data set of strings into a structured FHIR data set.\n    PathlingContext pc = PathlingContext.create(spark);\n    Dataset<Row> patients = pc.encode(jsonResources, "Patient");\n\n    // Do some stuff.\n    patients.select("id", "gender", "birthDate").show();\n  }\n\n}\n')))),(0,o.kt)("h2",{id:"reading-in-bundles"},"Reading in Bundles"),(0,o.kt)("p",null,"The FHIR ",(0,o.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/R4/bundle.html"},"Bundle")," resource can contain a\ncollection of FHIR resources. It is often used to represent a set of related\nresources, perhaps generated as part of the same event."),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(k,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(g,{mdxType:"PythonInstallation"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\n\npc = PathlingContext.create()\n\n# Read each Bundle into a row within a Spark data set.\nbundles_dir = '/some/path/bundles/'\nbundles = pc.spark.read.text(bundles_dir, wholetext=True)\n\n# Convert the data set of strings into a structured FHIR data set.\npatients = pc.encode_bundle(bundles, 'Patient')\n\n# JSON is the default format, XML Bundles can be encoded using input type.\n# patients = pc.encodeBundle(bundles, 'Patient', inputType=MimeType.FHIR_XML)\n\n# Do some stuff.\npatients.select('id', 'gender', 'birthDate').show()\n"))),(0,o.kt)(k,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,o.kt)(b,{mdxType:"ScalaInstallation"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.sql.SparkSession\nimport au.csiro.pathling.library.PathlingContext\n\nval spark = SparkSession.builder.getOrCreate()\n\n// Read each line from the NDJSON into a row within a Spark data set.\nval bundlesDir = "/some/path/bundles/"\nval bundles = spark.read.option("wholetext", value = true).text(bundlesDir)\n\n// Convert the data set of strings into a structured FHIR data set.\nval pc = PathlingContext.create(spark)\nval patients = pc.encodeBundle(bundles, "Patient")\n\n// JSON is the default format, XML Bundles can be encoded using input type.\n// val patients = pc.encodeBundle(bundles, "Patient", FhirMimeTypes.FHIR_XML)\n\n// Do some stuff.\npatients.select("id", "gender", "birthDate").show()\n'))),(0,o.kt)(k,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(v,{mdxType:"JavaInstallation"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.spark.sql.SparkSession;\nimport org.apache.spark.sql.Dataset;\nimport au.csiro.pathling.library.PathlingContext;\n\nclass MyApp {\n\n  public static void main(String args[]) {\n    SparkSession spark = SparkSession.builder().getOrCreate();\n\n    // Read each line from the NDJSON into a row within a Spark data set.\n    String bundlesDir = "/some/path/bundles/";\n    Dataset<Row> bundles = spark.read()\n        .option("wholetext", true)\n        .text(bundlesDir);\n\n    // Convert the data set of strings into a structured FHIR data set.\n    PathlingContext pc = PathlingContext.create(spark);\n    Dataset<Row> patients = pc.encodeBundle(bundles, "Patient");\n\n    // JSON is the default format, XML Bundles can be encoded using input \n    // type.\n    // Dataset<Row> patients = pc.encodeBundle(bundles, "Patient", \n    //     FhirMimeTypes.FHIR_XML);\n\n    // Do some stuff.\n    patients.select("id", "gender", "birthDate").show();\n  }\n\n}\n')))),(0,o.kt)("h2",{id:"installation-in-databricks"},"Installation in Databricks"),(0,o.kt)("p",null,'To make the Pathling encoders available within notebooks, navigate to the\n"Compute" section and click on the cluster. Click on the "Libraries" tab, and\nclick "Install new".'),(0,o.kt)("p",null,"Install both the ",(0,o.kt)("inlineCode",{parentName:"p"},"python")," PyPI package, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"au.csiro.pathling:library-api"),"\nMaven package. Once the cluster is restarted, the libraries should be available\nfor import and use within all notebooks."),(0,o.kt)("p",null,"See the Databricks documentation on\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.databricks.com/libraries/index.html"},"Libraries")," for more\ninformation."),(0,o.kt)("h2",{id:"spark-cluster-configuration"},"Spark cluster configuration"),(0,o.kt)("p",null,"If you are running your own Spark cluster, or using a Docker image (such as\n",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/jupyter/all-spark-notebook"},"jupyter/all-spark-notebook"),")\n,\nyou will need to configure Pathling as a Spark package."),(0,o.kt)("p",null,"You can do this by adding the following to your ",(0,o.kt)("inlineCode",{parentName:"p"},"spark-defaults.conf")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"spark.jars.packages au.csiro.pathling:library-api:[some version]\n")),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/configuration.html"},"Configuration"),"\npage of the Spark documentation for more information about ",(0,o.kt)("inlineCode",{parentName:"p"},"spark.jars.packages"),"\nand other related configuration options."),(0,o.kt)("p",null,"To create a Pathling notebook Docker image, your ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," might look like\nthis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM jupyter/all-spark-notebook\n\nUSER root\nRUN echo "spark.jars.packages au.csiro.pathling:library-api:[some version]" >> /usr/local/spark/conf/spark-defaults.conf\n\nUSER ${NB_UID}\n\nRUN pip install --quiet --no-cache-dir pathling && \\\n    fix-permissions "${CONDA_DIR}" && \\\n    fix-permissions "/home/${NB_USER}"\n')))}P.isMDXComponent=!0}}]);