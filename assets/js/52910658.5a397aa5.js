"use strict";(self.webpackChunkpathling_site=self.webpackChunkpathling_site||[]).push([[828],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>h});var n=a(7294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var p=n.createContext({}),m=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=m(t.components);return n.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),d=m(a),h=l,k=d["".concat(p,".").concat(h)]||d[h]||u[h]||r;return a?n.createElement(k,i(i({ref:e},s),{},{components:a})):n.createElement(k,i({ref:e},s))}));function h(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:l,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8957:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=a(7462),l=(a(7294),a(3905));const r={sidebar_position:3},i="Operators",o={unversionedId:"fhirpath/operators",id:"fhirpath/operators",title:"Operators",description:"Operators are special symbols or keywords that take a left and right operand,",source:"@site/docs/fhirpath/operators.md",sourceDirName:"fhirpath",slug:"/fhirpath/operators",permalink:"/docs/fhirpath/operators",draft:!1,editUrl:"https://github.com/aehrc/pathling/tree/main/site/docs/fhirpath/operators.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"fhirpath",previous:{title:"Data types",permalink:"/docs/fhirpath/data-types"},next:{title:"Functions",permalink:"/docs/fhirpath/functions"}},p={},m=[{value:"Comparison",id:"comparison",level:2},{value:"Equality",id:"equality",level:2},{value:"Math",id:"math",level:2},{value:"Date/time arithmetic",id:"datetime-arithmetic",level:2},{value:"Boolean logic",id:"boolean-logic",level:2},{value:"Membership",id:"membership",level:2},{value:"combine",id:"combine",level:2}],s={toc:m};function u(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"operators"},"Operators"),(0,l.kt)("p",null,"Operators are special symbols or keywords that take a left and right operand,\nreturning some sort of result."),(0,l.kt)("h2",{id:"comparison"},"Comparison"),(0,l.kt)("p",null,"The following comparison operators are supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<=")," - Less than or equal to"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<")," - Less than"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},">")," - Greater than"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},">=")," - Greater than or equal to")),(0,l.kt)("p",null,"Both operands must be singular, the table below shows the valid types and their\ncombinations."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("th",{parentName:"tr",align:null},"String"),(0,l.kt)("th",{parentName:"tr",align:null},"Integer"),(0,l.kt)("th",{parentName:"tr",align:null},"Decimal"),(0,l.kt)("th",{parentName:"tr",align:null},"Date"),(0,l.kt)("th",{parentName:"tr",align:null},"DateTime"),(0,l.kt)("th",{parentName:"tr",align:null},"Time"),(0,l.kt)("th",{parentName:"tr",align:null},"Quantity"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Decimal"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Date"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DateTime"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Time"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Quantity"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"true",(0,l.kt)("sup",null,"*"))))),(0,l.kt)("p",null,"If one or both of the operands is an empty collection, the operator will return\nan empty collection."),(0,l.kt)("p",null,"String ordering is strictly lexical and is based on the Unicode value of the\nindividual characters."),(0,l.kt)("p",null,"All comparison operators return a ",(0,l.kt)("a",{parentName:"p",href:"./data-types#boolean"},"Boolean")," value."),(0,l.kt)("sup",null,"*")," Not all Quantity values are comparable, it depends upon the comparability of the units. See the [FHIRPath specification](https://hl7.org/fhirpath/#comparison) for details on how Quantity values are compared. Quantities with a `comparator` are treated as not comparable by this implementation.",(0,l.kt)("p",null,"See also: ",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhirpath/#comparison"},"Comparison")),(0,l.kt)("h2",{id:"equality"},"Equality"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"=")," operator returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the left operand is equal to the right\noperand, and a ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise. The ",(0,l.kt)("inlineCode",{parentName:"p"},"!=")," is the inverse of the ",(0,l.kt)("inlineCode",{parentName:"p"},"=")," operator."),(0,l.kt)("p",null,"Both operands must be singular. The valid types and their combinations is the\nsame as for the ",(0,l.kt)("a",{parentName:"p",href:"#comparison"},"Comparison operators"),". In addition to this,\n",(0,l.kt)("a",{parentName:"p",href:"./data-types#coding"},"Coding")," types can be compared using the equality\noperators."),(0,l.kt)("p",null,"If one or both of the operands is an empty collection, the operator will return\nan empty collection."),(0,l.kt)("p",null,"Not all Quantity, Date and DateTime values can be compared for equality, it\ndepends upon the comparability of the units within the Quantity values. See the\n",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhirpath/#quantity-equality"},"FHIRPath specification")," for\ndetails on how equality works with Quantity values. Quantities with a\n",(0,l.kt)("inlineCode",{parentName:"p"},"comparator")," are treated as not comparable by this implementation."),(0,l.kt)("p",null,"See also: ",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhirpath/#equality"},"Equality")),(0,l.kt)("h2",{id:"math"},"Math"),(0,l.kt)("p",null,"The following math operators are supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"+")," - Addition"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-")," - Subtraction"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"*")," - Multiplication"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/")," - Division"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mod")," - Modulus")),(0,l.kt)("p",null,"Math operators support only ",(0,l.kt)("a",{parentName:"p",href:"./data-types#integer"},"Integer")," and\n",(0,l.kt)("a",{parentName:"p",href:"./data-types#decimal"},"Decimal")," operands."),(0,l.kt)("p",null,"The type of the two operands can be mixed. ",(0,l.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"-")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," return the same type\nas the left operand, ",(0,l.kt)("inlineCode",{parentName:"p"},"/")," returns ",(0,l.kt)("a",{parentName:"p",href:"./data-types#decimal"},"Decimal")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"mod"),"\nreturns ",(0,l.kt)("a",{parentName:"p",href:"./data-types#integer"},"Integer"),"."),(0,l.kt)("p",null,"Both operands must be singular."),(0,l.kt)("p",null,"If one or both of the operands is an empty collection, the operator will return\nan empty collection."),(0,l.kt)("p",null,"See also: ",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhirpath/#math"},"Math")),(0,l.kt)("h2",{id:"datetime-arithmetic"},"Date/time arithmetic"),(0,l.kt)("p",null,"The following operators are supported for date arithmetic:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"+")," - Add a duration to a ",(0,l.kt)("a",{parentName:"li",href:"./data-types#date"},"Date")," or\n",(0,l.kt)("a",{parentName:"li",href:"./data-types#datetime"},"DateTime")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-")," - Subtract a duration from a ",(0,l.kt)("a",{parentName:"li",href:"./data-types#date"},"Date")," or\n",(0,l.kt)("a",{parentName:"li",href:"./data-types#datetime"},"DateTime"))),(0,l.kt)("p",null,"Date arithmetic always has a ",(0,l.kt)("inlineCode",{parentName:"p"},"DateTime")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Date")," on the left-hand side, and a\nduration on the right-hand side. The duration operand is a\n",(0,l.kt)("a",{parentName:"p",href:"./data-types#quantity"},"calendar duration literal"),". The use of UCUM units\nis not supported with these operators."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Date")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"DateTime")," operand must be singular. If it is an empty collection,\nthe operator will return an empty collection."),(0,l.kt)("p",null,"The use of arithmetic with the ",(0,l.kt)("a",{parentName:"p",href:"./data-types#time"},"Time")," type is not\nsupported."),(0,l.kt)("p",null,"See also: ",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhirpath/#datetime-arithmetic"},"Date/Time Arithmetic")),(0,l.kt)("h2",{id:"boolean-logic"},"Boolean logic"),(0,l.kt)("p",null,"The following Boolean operations are supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"and")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"or")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"xor")," - Exclusive OR"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"implies")," - Material implication")),(0,l.kt)("p",null,"Both operands to a Boolean operator must be singular\n",(0,l.kt)("a",{parentName:"p",href:"./data-types#boolean"},"Boolean")," values."),(0,l.kt)("p",null,"All Boolean operators return a ",(0,l.kt)("a",{parentName:"p",href:"./data-types#boolean"},"Boolean")," value."),(0,l.kt)("p",null,"See also:\n",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhirpath/#boolean-logic"},"Boolean logic")),(0,l.kt)("h2",{id:"membership"},"Membership"),(0,l.kt)("p",null,"The following membership operators are supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"in")," (",(0,l.kt)("inlineCode",{parentName:"li"},"[element] in [collection]"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"contains")," (",(0,l.kt)("inlineCode",{parentName:"li"},"[collection] contains [element]"),")")),(0,l.kt)("p",null,"If the element operand is a collection with a single item, the operator\nreturns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the item is in the collection using ",(0,l.kt)("a",{parentName:"p",href:"#equality"},"equality"),"\nsemantics."),(0,l.kt)("p",null,"If the element is empty, the result is empty. If the collection is empty, the\nresult is ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". If the element has multiple items, an error is returned."),(0,l.kt)("p",null,"See also:\n",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhirpath/#collections-2"},"Collections")),(0,l.kt)("h2",{id:"combine"},"combine"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"combine")," operator merges the left and right operands into a single\ncollection, preserving duplicates. The result is not ordered."),(0,l.kt)("p",null,"The two operands provided to the ",(0,l.kt)("inlineCode",{parentName:"p"},"combine")," operator must share the same type."),(0,l.kt)("p",null,"This implementation has the same semantics as\nthe ",(0,l.kt)("a",{parentName:"p",href:"https://hl7.org/fhirpath/#combineother-collection-collection"},"combine function"),"\nwithin the FHIRPath specification, but is implemented as an operator."))}u.isMDXComponent=!0}}]);