"use strict";(self.webpackChunkpathling_site=self.webpackChunkpathling_site||[]).push([[434],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1656:function(e,t,n){n.r(t),n.d(t,{assets:function(){return D},contentTitle:function(){return S},default:function(){return O},frontMatter:function(){return w},metadata:function(){return x},toc:function(){return P}});var a=n(7462),r=n(3366),o=n(7294),i=n(3905),s=n(2389),l=n(7392),p=n(7094),u=n(2466),c=n(6010),d="tabList_uSqn",h="tabItem_LplD";function m(e){var t,n,r,i=e.lazy,s=e.block,m=e.defaultValue,f=e.values,k=e.groupId,g=e.className,b=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,l.l)(v,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===m?m:null!=(t=null!=m?m:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=b[0])?void 0:r.props.value;if(null!==N&&!v.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,p.U)(),S=w.tabGroupChoices,x=w.setTabGroupChoices,D=(0,o.useState)(N),P=D[0],T=D[1],O=[],j=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var R=S[k];null!=R&&R!==P&&v.some((function(e){return e.value===R}))&&T(R)}var C=function(e){var t=e.currentTarget,n=O.indexOf(t),a=v[n].value;a!==P&&(j(t),T(a),null!=k&&x(k,a))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=O.indexOf(e.currentTarget)+1;n=O[a]||O[0];break;case"ArrowLeft":var r=O.indexOf(e.currentTarget)-1;n=O[r]||O[O.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,c.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":s},g)},v.map((function(e){var t=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:P===t?0:-1,"aria-selected":P===t,key:t,ref:function(e){return O.push(e)},onKeyDown:I,onFocus:C,onClick:C},r,{className:(0,c.Z)("tabs__item",h,null==r?void 0:r.className,{"tabs__item--active":P===t})}),null!=n?n:t)}))),i?(0,o.cloneElement)(b.filter((function(e){return e.props.value===P}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==P})}))))}function f(e){var t=(0,s.Z)();return o.createElement(m,(0,a.Z)({key:String(t)},e))}var k="tabItem_OmH5";function g(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",className:(0,c.Z)(k,a),hidden:n},t)}var b=function(){return o.createElement("p",null,"To use the Pathling encoders from Python, install the ",o.createElement("a",{href:"https://pypi.org/project/pathling/"},"pathling")," package using ",o.createElement("a",{href:"https://pip.pypa.io/"},"pip"),". Note that Java 11 or later is required, with your",o.createElement("code",null,"JAVA_HOME")," properly set.")},v=function(){return o.createElement("p",null,"To use the Pathling encoders from Scala, install the ",o.createElement("code",null,"au.csiro.pathling:encoders")," ",o.createElement("a",{href:"https://maven.apache.org/"},"Maven")," package.")},y=function(){return o.createElement("p",null,"To use the Pathling encoders from Java, install the ",o.createElement("code",null,"au.csiro.pathling:encoders")," ",o.createElement("a",{href:"https://maven.apache.org/"},"Maven")," package.")},N=["components"],w={sidebar_position:1,sidebar_label:"Encoders"},S="Encoders",x={unversionedId:"encoders/index",id:"encoders/index",title:"Encoders",description:"Pathling provides a set of libraries that can be used to transform data between",source:"@site/docs/encoders/index.md",sourceDirName:"encoders",slug:"/encoders/",permalink:"/docs/encoders/",draft:!1,editUrl:"https://github.com/aehrc/pathling/tree/main/site/docs/encoders/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Encoders"}},D={},P=[{value:"Reading in NDJSON",id:"reading-in-ndjson",level:2},{value:"Reading in Bundles",id:"reading-in-bundles",level:2},{value:"Installation in Databricks",id:"installation-in-databricks",level:2},{value:"Spark cluster configuration",id:"spark-cluster-configuration",level:2}],T={toc:P};function O(e){var t=e.components,n=(0,r.Z)(e,N);return(0,i.kt)("wrapper",(0,a.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"encoders"},"Encoders"),(0,i.kt)("p",null,"Pathling provides a set of libraries that can be used to transform data between\nFHIR (",(0,i.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/R4/json.html"},"JSON"),"\nor ",(0,i.kt)("a",{parentName:"p",href:"https://www.hl7.org/fhir/R4/xml.html"},"XML"),") and Apache Spark data sets. The\nencoders can be used from Python, Scala and Java."),(0,i.kt)("p",null,"We also have upcoming support for R, subscribe to\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aehrc/pathling/issues/193"},"this issue")," for updates."),(0,i.kt)("p",null,"Once your data is encoded as a Spark data set, it can be queried using SQL, or\ntransformed using the full library of functions that Spark provides. It can also\nbe written to ",(0,i.kt)("a",{parentName:"p",href:"https://parquet.apache.org/"},"Parquet")," and other formats that are\ncompatible with a wide range of tools. See\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/"},"Spark documentation")," for more\ndetails."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We also have upcoming support for R, subscribe to\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aehrc/pathling/issues/193"},"this issue")," for updates."))),(0,i.kt)("h2",{id:"reading-in-ndjson"},"Reading in NDJSON"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://ndjson.org"},"NDJSON")," is a format commonly used for bulk FHIR data, and\nconsists of files (one per resource type) that contains one JSON resource per\nline."),(0,i.kt)(f,{mdxType:"Tabs"},(0,i.kt)(g,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(b,{mdxType:"PythonInstallation"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\n\npc = PathlingContext.create()\n\n# Read each line from the NDJSON into a row within a Spark data set.\nndjson_dir = '/some/path/ndjson/'\njson_resources = pc.spark.read.text(ndjson_dir)\n\n# Convert the data set of strings into a structured FHIR data set.\npatients = pc.encode(json_resources, 'Patient')\n\n# Do some stuff.\npatients.select('id', 'gender', 'birthDate').show()\n"))),(0,i.kt)(g,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,i.kt)(v,{mdxType:"ScalaInstallation"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.sql.SparkSession\nimport au.csiro.pathling.library.PathlingContext\n\nval spark = SparkSession.builder.getOrCreate()\n\n// Read each line from the NDJSON into a row within a Spark data set.\nval ndjsonDir = "/some/path/ndjson/"\nval jsonResources = spark.read.text(ndjsonDir)\n\n// Convert the data set of strings into a structured FHIR data set.\nval pc = PathlingContext.create(spark)\nval patients = pc.encode(jsonResources, "Patient")\n\n// Do some stuff.\npatients.select("id", "gender", "birthDate").show()\n'))),(0,i.kt)(g,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(y,{mdxType:"JavaInstallation"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.spark.sql.SparkSession;\nimport org.apache.spark.sql.Dataset;\nimport au.csiro.pathling.library.PathlingContext;\n\nclass MyApp {\n\n  public static void main(String args[]) {\n    SparkSession spark = SparkSession.builder().getOrCreate();\n\n    // Read each line from the NDJSON into a row within a Spark data set.\n    String ndjsonDir = "/some/path/ndjson/";\n    Dataset<Row> jsonResources = spark.read().text(ndjsonDir);\n\n    // Convert the data set of strings into a structured FHIR data set.\n    PathlingContext pc = PathlingContext.create(spark);\n    Dataset<Row> patients = pc.encode(jsonResources, "Patient");\n\n    // Do some stuff.\n    patients.select("id", "gender", "birthDate").show();\n  }\n\n}\n')))),(0,i.kt)("h2",{id:"reading-in-bundles"},"Reading in Bundles"),(0,i.kt)("p",null,"The FHIR ",(0,i.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/R4/bundle.html"},"Bundle")," resource can contain a\ncollection of FHIR resources. It is often used to represent a set of related\nresources, perhaps generated as part of the same event."),(0,i.kt)(f,{mdxType:"Tabs"},(0,i.kt)(g,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(b,{mdxType:"PythonInstallation"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\n\npc = PathlingContext.create()\n\n# Read each Bundle into a row within a Spark data set.\nbundles_dir = '/some/path/bundles/'\nbundles = pc.spark.read.text(bundles_dir, wholetext=True)\n\n# Convert the data set of strings into a structured FHIR data set.\npatients = pc.encode_bundle(bundles, 'Patient')\n\n# JSON is the default format, XML Bundles can be encoded using input type.\n# patients = pc.encodeBundle(bundles, 'Patient', inputType=MimeType.FHIR_XML)\n\n# Do some stuff.\npatients.select('id', 'gender', 'birthDate').show()\n"))),(0,i.kt)(g,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,i.kt)(v,{mdxType:"ScalaInstallation"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.sql.SparkSession\nimport au.csiro.pathling.library.PathlingContext\n\nval spark = SparkSession.builder.getOrCreate()\n\n// Read each line from the NDJSON into a row within a Spark data set.\nval bundlesDir = "/some/path/bundles/"\nval bundles = spark.read.option("wholetext", value = true).text(bundlesDir)\n\n// Convert the data set of strings into a structured FHIR data set.\nval pc = PathlingContext.create(spark)\nval patients = pc.encodeBundle(bundles, "Patient")\n\n// JSON is the default format, XML Bundles can be encoded using input type.\n// val patients = pc.encodeBundle(bundles, "Patient", FhirMimeTypes.FHIR_XML)\n\n// Do some stuff.\npatients.select("id", "gender", "birthDate").show()\n'))),(0,i.kt)(g,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(y,{mdxType:"JavaInstallation"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.spark.sql.SparkSession;\nimport org.apache.spark.sql.Dataset;\nimport au.csiro.pathling.library.PathlingContext;\n\nclass MyApp {\n\n  public static void main(String args[]) {\n    SparkSession spark = SparkSession.builder().getOrCreate();\n\n    // Read each line from the NDJSON into a row within a Spark data set.\n    String bundlesDir = "/some/path/bundles/";\n    Dataset<Row> bundles = spark.read()\n        .option("wholetext", true)\n        .text(bundlesDir);\n\n    // Convert the data set of strings into a structured FHIR data set.\n    PathlingContext pc = PathlingContext.create(spark);\n    Dataset<Row> patients = pc.encodeBundle(bundles, "Patient");\n\n    // JSON is the default format, XML Bundles can be encoded using input \n    // type.\n    // Dataset<Row> patients = pc.encodeBundle(bundles, "Patient", \n    //     FhirMimeTypes.FHIR_XML);\n\n    // Do some stuff.\n    patients.select("id", "gender", "birthDate").show();\n  }\n\n}\n')))),(0,i.kt)("h2",{id:"installation-in-databricks"},"Installation in Databricks"),(0,i.kt)("p",null,'To make the Pathling encoders available within notebooks, navigate to the\n"Compute" section and click on the cluster. Click on the "Libraries" tab, and\nclick "Install new".'),(0,i.kt)("p",null,"Install both the ",(0,i.kt)("inlineCode",{parentName:"p"},"python")," PyPI package, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"au.csiro.pathling:library-api"),"\nMaven package. Once the cluster is restarted, the libraries should be available\nfor import and use within all notebooks."),(0,i.kt)("p",null,"See the Databricks documentation on\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.databricks.com/libraries/index.html"},"Libraries")," for more\ninformation."),(0,i.kt)("h2",{id:"spark-cluster-configuration"},"Spark cluster configuration"),(0,i.kt)("p",null,"If you are running your own Spark cluster, or using a Docker image (such as\n",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/jupyter/all-spark-notebook"},"jupyter/all-spark-notebook"),")\n,\nyou will need to configure Pathling as a Spark package."),(0,i.kt)("p",null,"You can do this by adding the following to your ",(0,i.kt)("inlineCode",{parentName:"p"},"spark-defaults.conf")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"spark.jars.packages au.csiro.pathling:library-api:[some version]\n")),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/configuration.html"},"Configuration"),"\npage of the Spark documentation for more information about ",(0,i.kt)("inlineCode",{parentName:"p"},"spark.jars.packages"),"\nand other related configuration options."),(0,i.kt)("p",null,"To create a Pathling notebook Docker image, your ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," might look like\nthis:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM jupyter/all-spark-notebook\n\nUSER root\nRUN echo "spark.jars.packages au.csiro.pathling:library-api:[some version]" >> /usr/local/spark/conf/spark-defaults.conf\n\nUSER ${NB_UID}\n\nRUN pip install --quiet --no-cache-dir pathling && \\\n    fix-permissions "${CONDA_DIR}" && \\\n    fix-permissions "/home/${NB_USER}"\n')))}O.isMDXComponent=!0}}]);