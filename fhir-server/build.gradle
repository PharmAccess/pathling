buildscript {
  repositories { mavenCentral() }
  dependencies {
    // Required for `grun`.
    classpath group: 'org.antlr', name: 'antlr4', version: '4.7.2'
  }
}

apply plugin: 'application'
apply plugin: 'antlr'

group 'au.csiro.clinsight'
version '1.0-SNAPSHOT'
mainClassName = 'au.csiro.clinsight.FhirServerContainer'

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  implementation project(':resources')
  implementation project(':terminology-client')
  implementation project(':utilities')

  // HAPI FHIR
  implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-dstu3', version: '3.7.0-clinsight-SNAPSHOT'
  implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-server', version: '3.7.0-clinsight-SNAPSHOT'
  implementation group: 'org.codehaus.woodstox', name: 'woodstox-core-asl', version: '4.4.1'

  // This is used for the CorsConfiguration required by the CorsInterceptor.
  implementation group: 'org.springframework', name: 'spring-web', version: '5.0.8.RELEASE'

  // Embedded Jetty is used to serve the FhirServer servlet.
  implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.14.v20181114'
  implementation group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.14.v20181114'
  implementation group: 'org.mitre.dsmiley.httpproxy', name: 'smiley-http-proxy-servlet', version: '1.11'

  // Apache Spark, Spark SQL and Hive.
  implementation group: 'org.apache.spark', name: 'spark-core_2.11', version: '2.3.3'
  implementation group: 'org.apache.spark', name: 'spark-sql_2.11', version: '2.3.3'
  implementation group: 'org.apache.spark', name: 'spark-hive_2.11', version: '2.3.3'

  // Bunsen knows how to serialise FHIR resources into Spark datasets.
  implementation group: 'com.cerner.bunsen', name: 'bunsen-core', version: '0.4.6-SNAPSHOT'
  implementation group: 'com.cerner.bunsen', name: 'bunsen-stu3', version: '0.4.6-SNAPSHOT'

  // The Hive metastore used by the Spark data warehouse is stored in a PostgreSQL server.
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

  // Antlr is used for the parsing of FHIRPath expressions within queries.
  antlr "org.antlr:antlr4:4.7.2"

  // Test dependencies
  testImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.4'
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.24.0'
  testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
}

generateGrammarSource {
  // Generate Visitor classes from the Antlr grammar, which are more useful than Listeners.
  arguments += ["-visitor"]
}

jar {
  manifest {
    attributes(
        'Main-Class': 'au.csiro.clinsight.FhirServerContainer',
        'Class-Path': configurations.default.files.collect { file -> "/lib/$file.name" }.join(' ')
    )
  }
}

task dependencyJar(type: Copy) {
  from configurations.default
  into "$buildDir/dependencies"
}

def blackHole = new OutputStream() {
  @Override
  void write(int b) {}
}

task dockerBuild(type: Exec) {
  dependsOn jar
  dependsOn dependencyJar
  commandLine 'docker', 'build', '-t', 'docker-registry.it.csiro.au/clinsight/fhir-server', '.'
  standardOutput blackHole
}
build.finalizedBy(dockerBuild)

task dockerPush(type: Exec) {
  dependsOn dockerBuild
  commandLine 'docker', 'push', 'docker-registry.it.csiro.au/clinsight/fhir-server'
  standardOutput blackHole
}

// This task runs the Antlr `grun` utility, which provides a visualisation of the expression passed
// in to the `expression` project property.
task grun(type: JavaExec) {
  dependsOn 'classes'
  main = 'org.antlr.v4.gui.TestRig'
  args = ['au.csiro.clinsight.fhir.FhirPath', 'expression', '-gui']
  if (project.hasProperty('expression')) {
    standardInput = new ByteArrayInputStream(expression.getBytes())
  }
  classpath = sourceSets.main.runtimeClasspath
}

startScripts.enabled = false
distTar.enabled = false
distZip.enabled = false